block.GlowBlock: public boolean isBlockPowered() {
block.GlowBlock: public boolean isBlockIndirectlyPowered() {
block.GlowBlock: public boolean isBlockFacePowered(BlockFace face) {
block.GlowBlock: public boolean isBlockFaceIndirectlyPowered(BlockFace face) {
block.GlowBlock: public int getBlockPower(BlockFace face) {
block.GlowBlock: public int getBlockPower() {
entity.GlowEntity: public void setVelocity(Vector velocity) {
entity.GlowEntity: public List<Entity> getNearbyEntities(double x, double y, double z) {
entity.GlowEntity: public int getFireTicks() {
entity.GlowEntity: public int getMaxFireTicks() {
entity.GlowEntity: public void setFireTicks(int ticks) {
entity.GlowEntity: public Entity getPassenger() {
entity.GlowEntity: public boolean setPassenger(Entity passenger) {
entity.GlowEntity: public boolean isEmpty() {
entity.GlowEntity: public boolean eject() {
entity.GlowEntity: public float getFallDistance() {
entity.GlowEntity: public void setFallDistance(float distance) {
entity.GlowEntity: public UUID getUniqueId() {
entity.GlowLivingEntity: public List<Block> getLineOfSight(HashSet<Byte> transparent, int maxDistance) {
entity.GlowLivingEntity: public Block getTargetBlock(HashSet<Byte> transparent, int maxDistance) {
entity.GlowLivingEntity: public List<Block> getLastTwoTargetBlocks(HashSet<Byte> transparent, int maxDistance) {
entity.GlowLivingEntity: public Egg throwEgg() {
entity.GlowLivingEntity: public Snowball throwSnowball() {
entity.GlowLivingEntity: public Arrow shootArrow() {
entity.GlowLivingEntity: public boolean isInsideVehicle() {
entity.GlowLivingEntity: public boolean leaveVehicle() {
entity.GlowLivingEntity: public Vehicle getVehicle() {
entity.GlowLivingEntity: public int getRemainingAir() {
entity.GlowLivingEntity: public void setRemainingAir(int ticks) {
entity.GlowLivingEntity: public int getMaximumAir() {
entity.GlowLivingEntity: public void setMaximumAir(int ticks) {
entity.GlowLivingEntity: public void damage(int amount) {
entity.GlowLivingEntity: public void damage(int amount, Entity source) {
entity.GlowLivingEntity: public int getMaximumNoDamageTicks() {
entity.GlowLivingEntity: public void setMaximumNoDamageTicks(int ticks) {
entity.GlowLivingEntity: public int getLastDamage() {
entity.GlowLivingEntity: public void setLastDamage(int damage) {
entity.GlowLivingEntity: public int getNoDamageTicks() {
entity.GlowLivingEntity: public void setNoDamageTicks(int ticks) {
entity.GlowPlayer: public boolean isSneaking() {
entity.GlowPlayer: public void setSneaking(boolean sneak) {
entity.GlowPlayer: public boolean isSleepingIgnored() {
entity.GlowPlayer: public void setSleepingIgnored(boolean isSleeping) {
entity.GlowPlayer: public void saveData() {
entity.GlowPlayer: public void loadData() {
entity.GlowPlayer: public boolean sendChunkChange(Location loc, int sx, int sy, int sz, byte[] data) {
entity.GlowPlayer: public void updateInventory() {
GlowChunk: public Entity[] getEntities() {
GlowChunk: public BlockState[] getTileEntities() {
GlowChunk: public ChunkSnapshot getChunkSnapshot(boolean includeMaxblocky, boolean includeBiome, boolean includeBiomeTempRain) {
GlowServer: public void configureDbConfig(com.avaje.ebean.config.ServerConfig config) {
GlowServer: public boolean addRecipe(Recipe recipe) {
GlowServer: public Map<String, String[]> getCommandAliases() {
GlowServer: public int getSpawnRadius() {
GlowServer: public void setSpawnRadius(int value) {
GlowServer: public boolean getOnlineMode() {
GlowWorld: public boolean generateTree(Location location, TreeType type) {
GlowWorld: public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate) {
GlowWorld: public boolean loadChunk(int x, int z, boolean generate) {
GlowWorld: public boolean unloadChunk(int x, int z, boolean save, boolean safe) {
    ("unloadChunk does not yet support unsafe unloading.");
GlowWorld: public boolean unloadChunkRequest(int x, int z, boolean safe) {
GlowWorld: public <T extends Entity> T spawn(Location location, Class<T> clazz) throws IllegalArgumentException {
GlowWorld: public LightningStrike strikeLightning(Location loc) {
GlowWorld: public LightningStrike strikeLightningEffect(Location loc) {
GlowWorld: public boolean createExplosion(Location loc, float power, boolean setFire) {
GlowWorld: public ChunkSnapshot getEmptyChunkSnapshot(int x, int z, boolean includeBiome, boolean includeBiomeTempRain) {
scheduler.GlowScheduler: public <T> Future<T> callSyncMethod(Plugin plugin, Callable<T> task) {
